syntax = "proto3";
package headscale.v1;
option  go_package = "github.com/juanfont/headscale/gen/go/v1";

import "google/protobuf/timestamp.proto";
import "headscale/v1/namespace.proto";
import "headscale/v1/preauthkey.proto";

enum RegisterMethod {
    REGISTER_METHOD_UNSPECIFIED = 0;
    REGISTER_METHOD_AUTH_KEY    = 1;
    REGISTER_METHOD_CLI         = 2;
    REGISTER_METHOD_OIDC        = 3;
}

message Machine {
    uint64          id           = 1;
    string          machine_key  = 2;
    string          node_key     = 3;
    string          disco_key    = 4;
    repeated string ip_addresses = 5;
    string          name         = 6;
    Namespace namespace          = 7;

    google.protobuf.Timestamp last_seen              = 8;
    google.protobuf.Timestamp last_successful_update = 9;
    google.protobuf.Timestamp expiry                 = 10;

    PreAuthKey pre_auth_key = 11;

    google.protobuf.Timestamp created_at = 12;

    RegisterMethod register_method = 13;

    reserved 14 to 17;
    // google.protobuf.Timestamp updated_at = 14;
    // google.protobuf.Timestamp deleted_at = 15;

    // bytes host_info      = 15;
    // bytes endpoints      = 16;
    // bytes enabled_routes = 17;

    repeated string forced_tags  = 18;
    repeated string invalid_tags = 19;
    repeated string valid_tags   = 20;
    string          given_name   = 21;
    HostInfo host_info           = 22;
}

message RegisterMachineRequest {
    string namespace = 1;
    string key       = 2;
}

message RegisterMachineResponse {
    Machine machine = 1;
}

message GetMachineRequest {
    uint64 machine_id = 1;
}

message GetMachineResponse {
    Machine machine = 1;
}

message SetTagsRequest {
    uint64          machine_id = 1;
    repeated string tags       = 2;
}

message SetTagsResponse {
    Machine machine = 1;
}

message DeleteMachineRequest {
    uint64 machine_id = 1;
}

message DeleteMachineResponse {
}

message ExpireMachineRequest {
    uint64 machine_id = 1;
}

message ExpireMachineResponse {
    Machine machine = 1;
}

message RenameMachineRequest {
    uint64 machine_id = 1;
    string new_name   = 2;
}

message RenameMachineResponse {
    Machine machine = 1;
}

message ListMachinesRequest {
    string namespace = 1;
}

message ListMachinesResponse {
    repeated Machine machines = 1;
}

message MoveMachineRequest {
    uint64 machine_id = 1;
    string namespace  = 2;
}

message MoveMachineResponse {
    Machine machine = 1;
}

message DebugCreateMachineRequest {
    string namespace       = 1;
    string          key    = 2;
    string          name   = 3;
    repeated string routes = 4;
}

message DebugCreateMachineResponse {
    Machine machine = 1;
}

message HostInfo {
    // version of this code (in version.Long format)
    string ipn_version = 1;
    // logtail ID of frontend instance
    string frontend_log_id          = 2;
    // logtail ID of backend instance
    string backend_log_id           = 3;
    // operating system the client runs on (a version.OS value)
    string os = 4;

    // OSVersion is the version of the OS, if available.
    //
    // For Android, it's like "10", "11", "12", etc. For iOS and macOS it's like
    // "15.6.1" or "12.4.0". For Windows it's like "10.0.19044.1889". For
    // FreeBSD it's like "12.3-STABLE".
    //
    // For Linux, prior to Tailscale 1.32, we jammed a bunch of fields into this
    // string on Linux, like "Debian 10.4; kernel=xxx; container; env=kn" and so
    // on. As of Tailscale 1.32, this is simply the kernel version on Linux, like
    // "5.10.0-17-amd64".
    string os_version = 5;

    // whether the client is running in a container
    bool container = 6;
    // a hostinfo.EnvType in string form
    string env = 7;
    // "debian", "ubuntu", "nixos", ...
    string distro = 8;
    // "20.04", ...
    string distro_version = 9;
    // "jammy", "bullseye", ...
    string distro_codename = 10;
    // if a desktop was detected on Linux
    bool desktop = 11;
    // Tailscale package to disambiguate ("choco", "appstore", etc; "" for unknown)
    string package = 12;
    // mobile phone model ("Pixel 3a", "iPhone12,3")
    string device_model = 13;
    // name of the host the client runs on
    string hostname = 14;
    // indicates whether the host is blocking incoming connections
    bool shields_up = 15;
    // indicates this node exists in netmap because it's owned by a shared-to user
    bool sharee_node = 16;
    // indicates that the user has opted out of sending logs and support
    bool no_logs_no_support = 17;
    // the host's GOARCH value (of the running binary)
    string go_arch = 18;
    // Go version binary was built with
    string go_version = 19;
    // set of IP ranges this client can route
    repeated string routeable_ips = 20;
    // set of ACL tags this node wants to claim
    repeated string request_tags = 21;
    // if advertised
    repeated string ssh_host_keys = 24;
    string cloud = 25;
    // if the client is running in userspace (netstack) mode
    bool userspace_version = 26;
    // if the client's subnet router is running in userspace (netstack) mode
    bool userspace_router = 27;
}